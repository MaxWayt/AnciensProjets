/*
** do_inf_mult.c for bistro in /home/nguy_v//SVN/bistromathique-2017-nguy_v/multiplication
** 
** Made by virgil nguyen
** Login   <nguy_v@epitech.net>
** 
** Started on  Fri Nov  9 10:34:42 2012 virgil nguyen
** Last update Sat Nov 10 16:45:45 2012 virgil nguyen
*/

int	*inf_mult(char *tab[2], t_base *base, char ops[7])
{
  char	*tab_int;
  int	i;
  int	j;
  int	stop;

  stop = 0;
  i = my_strlen(tab[0]) - 1;
  tab_int = xmalloc((my_strlen(tab[0]) + my_strlen(tab[1]) + 2) * sizeof(int));
  if (tab[0][0] == pos[3] && tab[1][0] == pos[3])
    stop = 1;
  while (i >= stop)
    {
      j = my_strlen(tab[1]) - 1;
      while (j >= stop)
	{
	  tab_int[i + j + 1] += (tab[0][i] - 48) * (tab[1][j] - 48);
	  tab_int[i + j] += tab_int[i + j + 1] / base->lenght;
	  tab_int[i + j + 1] = tab[ i + j + 1] % base->lenght;
	  j--;
	}
      i--;
    }
  return (tab_int);
}

char	*put_buff(char *tab[2], int i, int *tab_int, char *buff)
{
  while (tab_int[i])
    {
      buff[i] = base->value[tab[i]];
      i++;
    }
  buff = my_realloc(buff, i + 1, sizeof(char));
  buff[i + 1] = 0;
  free(tab_int);
  free(tab[0]);
  free(tab[1]);
  return (buff);
}

char	*do_op_mult(char *tab[2], t_base *base, char ops[7], char *buff)
{
  int	*tab_int;
  int	i;

  i = 0;
  buff = xmalloc((my_strlen(tab[0]) + my_strlen(tab[1]) + 2) * sizeof(char));
  if (tab[0][0] == ops[3] && tab[1][0] != ops[3])
    {
      buff[0] = ops[3];
      i = 1;
      tab[0][0] += 1;
     }
  else if (tab[0][0] != ops[3] && tab[1][0] == ops[3])
    {
      buff[0] = ops[3];
      i = 1;
      tab[0][1] += 1;
    }
  tab_int = inf_mult(tab, base, ops);
  buff = put_buff(tab, i, tab_int, buff);
  return (my_revstr(buff));
}
