/*
** operations.c for temp_operations in /home/fest/Epitech/bistromathique/temp_operations
** 
** Made by maxime ginters
** Login   <ginter_m@epitech.eu>
** 
** Started on  Tue Nov 06 16:23:06 2012 maxime ginters
** Last update Sat Nov 10 22:22:44 2012 maxime ginters
*/

#include <stdlib.h>
#include "my.h"
#include "operations.h"
#include "bistromathique.h"

#define rm_op remove_operator_from_second_str

char	*do_op_add(char *tab[2], t_base *base, char ops[7])
{
  int	len[2];
  int	i;
  char	*buff;
  int	ret;

  if (tab[0][0] == ops[OP_SUB_IDX] && tab[1][0] != ops[OP_SUB_IDX])
      return (do_op_sub(rm_op(swap_tab(tab), ops, 1), base, ops));
  if (tab[1][0] == ops[OP_SUB_IDX] && tab[0][0] != ops[OP_SUB_IDX])
    return (do_op_sub(rm_op(tab, ops, 1), base, ops));
  len[0] = my_strlen(tab[0]) - 1;
  len[1] = my_strlen(tab[1]) - 1;
  buff = malloc(((len[0] > len[1] ? len[0] : len[1]) + 3) * sizeof(char));
  check_malloc(buff);
  i = 0;
  ret = 0;
  while (len[0] >= min_ref(tab[0][0]) || len[1] >= min_ref(tab[1][0]))
  {
    if (len[0] >= min_ref(tab[0][0]) && len[1] >= min_ref(tab[1][0]))
      ret += base->value[tab[0][len[0]]] + base->value[tab[1][len[1]]];
    else if (len[0] >= min_ref(tab[0][0]))
      ret += base->value[tab[0][len[0]]];
    else if (len[1] >= min_ref(tab[1][0]))
      ret += base->value[tab[1][len[1]]];
    buff[i++] = get_char_for_value(ret % base->length, base);
    ret /= base->length;
    --len[0];
    --len[1];
  }
  if (ret > 0)
    buff[i++] = get_char_for_value(ret % base->length, base);
  if (min_ref(tab[0][0]) == 1 && min_ref(tab[1][0]) == 1)
    buff[i++] = '-';
  buff[i] = '\0';

  free(tab[0]);
  free(tab[1]);
  buff = my_realloc(buff, i + 1, sizeof(char));
  buff[i] = '\0';
  buff = my_revstr(buff);
  return (buff);
}

char	*do_op_sub(char *tab[2], t_base *base, char ops[7])
{
  int	neg[2];

  if (tab[0][0] == ops[OP_SUB_IDX] && tab[1][0] != ops[OP_SUB_IDX])
    return (my_strcat(my_strdup("-"), do_op_add(rm_op(tab, ops, 0), base, ops)));
  else if (tab[1][0] == ops[OP_SUB_IDX])
    return (do_op_add(rm_op(tab, ops, 1), base, ops));
  neg[0] = (tab[0][0] == ops[OP_SUB_IDX]);
  neg[1] = (tab[1][0] == ops[OP_SUB_IDX]);
  return (op_sub(tab, base, ops, neg));
}

char	*do_op_mult(char *tab[2], t_base *base, char ops[7])
{
  char	*buff;
  int	len[2];
  int	off;
  int	tmp;
  int	j;
  int	i;

  len[0] = my_strlen(tab[0]) - 1;
  len[1] = my_strlen(tab[1]) - 1;
  off = 0;
  i = 0;
  buff = xmalloc((len[0] + len[1] + 3) * sizeof(char));
  my_memset(buff, get_char_for_value(0, base), len[0] + len[1] + 2);
  while (len[1] >= min_ref(tab[1][0]))
  {
    len[0] = my_strlen(tab[0]) - 1;
    while (len[0] >= min_ref(tab[0][0]))
    {
      tmp = base->value[tab[0][len[0]]] * base->value[tab[1][len[1]]];
      tmp += base->value[buff[off]];;
      buff[off] = get_char_for_value(tmp % base->length, base);
      j = 1;
      while (tmp / base->length > 0)
      {
        tmp = (tmp / base->length) + base->value[buff[off + j]];
        buff[off + j] = get_char_for_value(tmp % base->length, base);
        ++j;
      }
      ++off;
      --len[0];
    }
    off = ++i;
    --len[1];
  }
  if (min_ref(tab[0][0]) != min_ref(tab[1][0]))
    buff[i++] = '-';
  free(tab[0]);
  free(tab[1]);
  return (my_revstr(my_strdup(buff)));
}

char	*do_op_div(char *tab[2], t_base *base, char ops[7])
{
  free(tab[0]);
  free(tab[1]);
  return (my_strdup("0"));
}

char	*do_op_mod(char *tab[2], t_base *base, char ops[7])
{
  free(tab[0]);
  free(tab[1]);
  return (my_strdup("0"));
}
