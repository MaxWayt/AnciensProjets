/*
** op_sub.c for operations in /home/fest/Epitech/bistromathique/operations
** 
** Made by maxime ginters
** Login   <ginter_m@epitech.eu>
** 
** Started on  Thu Nov 08 13:58:07 2012 maxime ginters
** Last update Thu Nov 08 14:50:15 2012 maxime ginters
*/

#include "my.h"
#include "operations.h"
#include "bistromathique.h"

char	*op_sub(char *tab[2], t_base *base, char ops[7], int neg[2])
{
  int	a_high;
  char	*buff;
  int	len[2];
  int	i;
  int	ret;
  int	tmp;

  a_high = a_is_high_b(tab[0], tab[1], base, ops);
  if (a_high == 0)
  {
    buff = tab[0];
    tab[0] = tab[1];
    tab[1] = buff;
  }

  len[0] = my_strlen(tab[0]) - 1;
  len[1] = my_strlen(tab[1]) - 1;
  buff = malloc(((len[0] > len[1] ? len[0] : len[1]) + 3) * sizeof(char));
  check_malloc(buff);

  i = 0;
  ret = 0;
  tmp = 0;
  while (len[0] >= min_ref(tab[0][0]) || len[1] >= min_ref(tab[1][0]))
  {
    if (len[0] >= min_ref(tab[0][0]) && len[1] >= min_ref(tab[1][0]))
      tmp = base->value[tab[0][len[0]]] - base->value[tab[1][len[1]]] - ret;
    else if (len[0] >= min_ref(tab[0][0]))
      tmp = base->value[tab[0][len[0]]] - ret;
    ret = (tmp < 0);
    if (tmp < 0)
      tmp += base->length;
    buff[i++] = get_char_for_value(tmp % base->length, base);
    --len[0];
    --len[1];
  }
  if (ret > 0)
    buff[i++] = get_char_for_value(ret % base->length, base);
  if ((a_high == 1 && neg[0] == 1) || (a_high == 0 && neg[1] == 1) ||
    (a_high == 0 && neg[0] == 0 && neg[1] == 0))
      buff[i++] = '-';
  buff[i] = '\0';
  free(tab[0]);
  free(tab[1]);
  buff = my_realloc(buff, i + 1, sizeof(char));
  buff[i] = '\0';
  return (my_revstr(buff));
}
